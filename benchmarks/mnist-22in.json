{
  "epochs": 60,
  "iteracoes": 2500,
  "taxa_aprendizado": 0.04,
  "runs": 10,
  "momentum": 0.2,
  "runs_data": [
    {
      "last_error": 0.26780419366643404,
      "precisao": 0.5836,
      "positivos": 1459,
      "negativos": 1041
    },
    {
      "last_error": 0.2606008358844281,
      "precisao": 0.5632,
      "positivos": 1408,
      "negativos": 1092
    },
    {
      "last_error": 0.2666444680060514,
      "precisao": 0.5596,
      "positivos": 1399,
      "negativos": 1101
    },
    {
      "last_error": 0.2731496035626506,
      "precisao": 0.5892,
      "positivos": 1473,
      "negativos": 1027
    },
    {
      "last_error": 0.27475348762852964,
      "precisao": 0.5664,
      "positivos": 1416,
      "negativos": 1084
    },
    {
      "last_error": 0.26998781742352784,
      "precisao": 0.578,
      "positivos": 1445,
      "negativos": 1055
    },
    {
      "last_error": 0.2676861479924476,
      "precisao": 0.5428,
      "positivos": 1357,
      "negativos": 1143
    },
    {
      "last_error": 0.27565009900263193,
      "precisao": 0.5592,
      "positivos": 1398,
      "negativos": 1102
    },
    {
      "last_error": 0.26625510054782003,
      "precisao": 0.5576,
      "positivos": 1394,
      "negativos": 1106
    },
    {
      "last_error": 0.26408536850212233,
      "precisao": 0.5672,
      "positivos": 1418,
      "negativos": 1082
    }
  ],
  "runs_avg": {
    "last_error": 0.26866171222166435,
    "precisao": 0.56668,
    "positivos": 1416.7,
    "negativos": 1083.3
  },
  "layers": 5,
  "neurons_per_layer": [
    22,
    23,
    32,
    16,
    10
  ],
  "bias_type": "no-bias",
  "activation_function": "activation_function(input) {\r\n        return 1.0 / (1.0 + Math.exp(-input));\r\n    }",
  "activation_function_derivative": "Ï†_derivative(input) {\r\n        return Math.exp(-input) / Math.pow(1 + Math.exp(-input), 2);\r\n    }",
  "input_function": "input_function(inputs) {\r\n        let sum = 0;\r\n        for (const { value, origin } of inputs) {\r\n            // Each unit j first computes a weighted sum of its inputs:\r\n            sum += value * findLinkWeight(origin, this);\r\n        }\r\n        return sum;\r\n    }",
  "descriptor": "SemiBrief"
}