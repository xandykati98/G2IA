{
  "epochs": 60,
  "iteracoes": 10000,
  "taxa_aprendizado": 0.01,
  "runs": 10,
  "runs_data": [
    {
      "last_error": 0.029211348384266884,
      "precisao": 0.8321678321678322,
      "positivos": 833,
      "negativos": 168
    },
    {
      "last_error": 0.03643323505845512,
      "precisao": 0.8911088911088911,
      "positivos": 892,
      "negativos": 109
    },
    {
      "last_error": 0.006437579943333296,
      "precisao": 0.972027972027972,
      "positivos": 973,
      "negativos": 28
    },
    {
      "last_error": 0.04570559591833172,
      "precisao": 0.9560439560439561,
      "positivos": 957,
      "negativos": 44
    },
    {
      "last_error": 0.004435768048833205,
      "precisao": 0.981018981018981,
      "positivos": 982,
      "negativos": 19
    },
    {
      "last_error": 0.004434593224572626,
      "precisao": 0.981018981018981,
      "positivos": 982,
      "negativos": 19
    },
    {
      "last_error": 0.006484189229814599,
      "precisao": 0.972027972027972,
      "positivos": 973,
      "negativos": 28
    },
    {
      "last_error": 0.005631749734247432,
      "precisao": 0.975024975024975,
      "positivos": 976,
      "negativos": 25
    },
    {
      "last_error": 0.006788667203573352,
      "precisao": 0.973026973026973,
      "positivos": 974,
      "negativos": 27
    },
    {
      "last_error": 0.006153696233601751,
      "precisao": 0.974025974025974,
      "positivos": 975,
      "negativos": 26
    }
  ],
  "runs_avg": {
    "last_error": 0.015171642297902998,
    "precisao": 0.9507492507492508,
    "positivos": 951.7,
    "negativos": 49.3
  },
  "layers": 3,
  "neurons_per_layer": [
    3,
    4,
    1
  ],
  "bias_type": "as-input-neuron",
  "activation_function": "activation_function(input) {\r\n        return 1.0 / (1.0 + Math.exp(-input));\r\n    }",
  "activation_function_derivative": "Ï†_derivative(input) {\r\n        return Math.exp(-input) / Math.pow(1 + Math.exp(-input), 2);\r\n    }",
  "input_function": "input_function(inputs) {\r\n        let sum = 0;\r\n        for (const { value, origin } of inputs) {\r\n            // Each unit j first computes a weighted sum of its inputs:\r\n            sum += value * findLinkWeight(origin, this);\r\n        }\r\n        return sum;\r\n    }"
}